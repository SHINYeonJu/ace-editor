package com.skhynix.dmr;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class FittingPlotGen {
	
	public static void main(String[] args) {
		File file = new File("C:\\test\\fittingPlot\\1.dat");
		FittingPlotModel instance;
		try {
			instance = new FittingPlotModel(file);
			System.out.println("isLdmos: " + instance.isLdmos());
			System.out.println("isISub: " + instance.isISub());
			
			IdvgNetList.create(instance.isLdmos());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static class FittingPlotModel {
		private String w;
		private String l;
		private String t;
		private int sizeIdVgY;
		private int sizeIbVgY;
		private boolean isDefaultIbVgY;
		
		public FittingPlotModel(File file) throws Exception {
			FileInputStream fis = null;
			BufferedReader in = null;
			try {
				fis = new FileInputStream(file);
				in = new BufferedReader(new InputStreamReader(fis, "UTF-8"));
				String rLine="";
				while((rLine=in.readLine())!=null) {
					if (startWithInstance(rLine)) {
						extraInstance(rLine);
					} else if (startWithIdVg(rLine)) {
						extraIdVg(in.readLine());
					} else if (startWithIbVg(rLine)) {
						extraIbVg(in);
					}
				}
			} finally {
				if (fis != null) {
					try {
						fis.close();
					} catch (Exception e) {}
				}
				if (in != null) {
					try {
						in.close();
					} catch (Exception e) {}
				}
			}
		}
		
		public boolean isLdmos() {
			return !this.t.equals("25") && sizeIdVgY == 1 && isDefaultIbVgY;
		}
		
		public boolean isISub() {
			return !isLdmos() && this.t.equals("25") && sizeIbVgY == 1;
		}
		
		private boolean startWithInstance(String str) {
			return str.startsWith("Instance");
		}
		
		private void extraInstance(String str) {
			int startIndex = str.indexOf("{");
			int endIndex = str.length() - 1; // } index
			String tmp = str.substring(startIndex, endIndex);
			String[] vList = tmp.split(",");
			for (String keyValue: vList) {
				String[] keyAndValue = keyValue.split("=");
				String key = keyAndValue[0].trim();
				String value = keyAndValue[1].trim();
				
				switch (key) {
					case "W":
						this.w = value;
						break;
					case "L":
						this.l = value;
						break;
					case "T":
						this.t = value;
						break;
					default:
						break;
				}
				
			}
		}
		
		private boolean startWithIdVg(String str) {
			return str.indexOf("{Id_Vg}") > -1;
		}
		
		private void extraIdVg(String str) {
			sizeIdVgY = countY(str);
		}
		
		private int countY(String str) {
			int sizeY = 0;
			for (String tmp: str.split(",")) {
				if (tmp.indexOf("Id(Vbs") > -1) {
					sizeY++;
				}
			}
			return sizeY;
		}

		private boolean startWithIbVg(String str) {
			return str.indexOf("{Ib_Vg}") > -1;
		}
		
		private void extraIbVg(BufferedReader in) throws Exception {
			String rLine="";
			while((rLine=in.readLine())!=null) {
				if (rLine.indexOf("{Vgs") > -1) {
					sizeIbVgY = countY(rLine);
				} else {
					String[] vList = rLine.split(",");
					if (vList.length == 2 && vList[1].trim().equals("0.000000")) {
						this.isDefaultIbVgY = true;
					} else {
						this.isDefaultIbVgY = false;
					}
				}
			}
		}
	}

	public static class IdvgNetList {
		public static void create(boolean isLdmos) {
			String tmpl = getTemplate();
			Map<String, String> replacements = getIdVgInfo();
			String result = replace(tmpl, replacements);
			result = filterIfIsLdmos(result, isLdmos);
			System.out.println(result);
		}
		
		/**
		 * DB에서 템플릿을 읽어서 리턴한다.
		 * @return
		 */
		public static String getTemplate() {
			String tmpl = "\r\n" + 
					"\r\n" + 
					"*** option\r\n" + 
					".option  opts gmin=1e-18 gmindc=1e-18 ingold=2\r\n" + 
					"+        absmos=1e-12 relmos=1e-6 absvdc=1e-9 relvdc=1e-6\r\n" + 
					"+        nomod nopage brief newtol probe post\r\n" + 
					"+        numdgt=8 co=300 scale=1\r\n" + 
					"\r\n" + 
					"*** model card\r\n" + 
					".lib '@{1}@{2}'tt_@{3}\r\n" + 
					"\r\n" + 
					".lib 'para_diode_hspice.LIB'tt_dio\r\n" + 
					"\r\n" + 
					"*** TR./Polarities select\" + nextLine;\r\n" + 
					".malias @{4}= tr\r\n" + 
					".param  cor_flg = 0\r\n" + 
					".param  polarities = @{5} $(NMOS=1, PMOS=-1)\r\n" + 
					"\r\n" + 
					"*** temp\r\n" + 
					".temp @{6}\r\n" + 
					"\r\n" + 
					"*** size\r\n" + 
					".param wid='@{7}u*@{8}' len=@{9}u\r\n" + 
					"\r\n" + 
					"*** voltage\r\n" + 
					".param vdlin = '@{10} * polarities'\r\n" + 
					".param vdsat = '@{11} * polarities'\r\n" + 
					"\r\n" + 
					".param vgstart = '-0.5 * polarities'\r\n" + 
					".param vgend = '@{12} * polarities' $Vgs Sweep End Voltag\r\n" + 
					".param vgstep = '@{13} * polarities' $vgs sweep step voltage\r\n" + 
					"\r\n" + 
					".param vgs = '0 * polarities'\r\n" + 
					".param vbs = '0 * polarities'\r\n" + 
					"\r\n" + 
					"*** voltage source/node\r\n" + 
					"vdl  dl  0 vdlin\r\n" + 
					"vdd  dd  0 vdsat\r\n" + 
					"vgh  gh  g ' 1*vgstep'\r\n" + 
					"vgm  g   0 vgs\r\n" + 
					"vgl  gl  g '-1*vgstep'\r\n" + 
					"vss  s   0 0\r\n" + 
					"vbb  b   0 vbs\r\n" + 
					"\r\n" + 
					"*** voltage sweep\r\n" + 
					".dc vgs vgstart vgend vgstep\r\n" + 
					"\r\n" + 
					"\r\n" + 
					"\r\n" + 
					"*** sub circuit\r\n" + 
					"xg   dl  g   s b @{14} tr width=wid length=len  $ vtext monitoring\r\n" + 
					"xds  dd  g   s b @{15} tr width=wid length=len  $ vtsat monitoring\r\n" + 
					"\r\n" + 
					"*** monitoring item\r\n" + 
					".measure dc corner_flag param='cor_flg'\r\n" + 
					".measure dc temp param='temper'\r\n" + 
					".measure dc w param = 'wid'\r\n" + 
					".measure dc l param = 'len'\r\n" + 
					"\r\n" + 
					".print idvg_lin =i(xg.m@{16}) $ id-vg curve(vds : low)\r\n" + 
					".print idvg_sat=i(xds.m@{17}) $ id-vg curve(vds : high)\r\n" + 
					"\r\n" + 
					"\r\n" + 
					".alter\r\n" + 
					".param vbs = '@{18}'\r\n" + 
					"\r\n" + 
					"\r\n" + 
					"\r\n" + 
					".alter\" + nextLine;\r\n" + 
					".param vbs = '@{19}'\r\n" + 
					"\r\n" + 
					"\r\n" + 
					"\r\n" + 
					".alter\" + nextLine;\r\n" + 
					".param vbs = '@{20}'\r\n" + 
					"\r\n" + 
					"\r\n" + 
					"\r\n" + 
					".alter\" + nextLine;\r\n" + 
					".param vbs = '@{21}'\r\n" + 
					"\r\n" + 
					"\r\n" + 
					"\r\n" + 
					"** end";
			return tmpl;
		}
		
		public static Map<String, String> getIdVgInfo() {
			// TODO. DB에서 데이터를 가져온다.
			
			// 가져온 데이터를 맵으로 담는다.
			Map<String, String> replacements = new HashMap<String, String>() {{
			    put("@{1}", "1");
			    put("@{2}", "2");
			    put("@{3}", "3");
			    put("@{4}", "4");
			    put("@{5}", "5");
			}};
			
			return replacements;
		}
		
		public static String replace(String tmpl, Map<String, String> replacements) {
			String regex = "(\\@\\{[^}]+\\})";
			Pattern p = Pattern.compile(regex);
			Matcher m = p.matcher(tmpl);
			StringBuffer sb = new StringBuffer();
			
			while (m.find())
			{
				String repString = replacements.get(m.group(1));
			    if (repString != null)    
			        m.appendReplacement(sb, repString);
			}
			m.appendTail(sb);
			
			return sb.toString();
		}
		
		public static String filterIfIsLdmos(String tmpl, boolean isLdmos) {
			if (!isLdmos) {
				return tmpl;
			} else {
				StringReader reader = new StringReader(tmpl);
				BufferedReader bufferedReader = new BufferedReader(reader);
				StringBuilder sb = new StringBuilder();
				String rLine="";
				int lineNumber = 1;

				try {
					while ((rLine = bufferedReader.readLine()) != null) {
						if (lineNumber < 64 || lineNumber > 83) {
							sb.append(rLine + "\r\n");
						}
						lineNumber++;
					}
				} catch (IOException e) {
					
				} finally {
					reader.close();
					try {
						bufferedReader.close();
					} catch (IOException e) {}
				}
				return sb.toString();
			}
		}
	}
}
