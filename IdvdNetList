	public static class IdvdNetList {
		public static void create(boolean isLdmos) {
			String tmpl = getTemplate();
			Map<String, String> replacements = getIdVdInfo();
			String result = replace(tmpl, replacements);
			int baseLine = getBaseLine(replacements);
			result = filterIfIsLdmos(result, isLdmos, baseLine);
			System.out.println(result);
		}
		
		/**
		 * DB에서 템플릿을 읽어서 리턴한다.
		 * @return
		 */
		public static String getTemplate() {
			String tmpl = "\r\n" + 
					"\r\n" + 
					"*** option\r\n" + 
					".option  opts gmin=1e-18 gmindc=1e-18 ingold=2\r\n" + 
					"+        absmos=1e-12 relmos=1e-6 absvdc=1e-9 relvdc=1e-6\r\n" + 
					"+        nomod nopage brief newtol probe post\r\n" + 
					"+        numdgt=8 co=300 scale=1\r\n" + 
					"\r\n" + 
					"*** model card\r\n" + 
					".lib '@1'tt_@2\r\n" + 
					"\r\n" + 
					".lib 'para_diode_hspice.LIB'tt_dio\r\n" + 
					"\r\n" + 
					"*** TR./Polarities select\r\n" + 
					".malias @3 = tr\r\n" + 
					".param  cor_flg = 0\r\n" + 
					".param  polarities = @4 $(NMOS=1, PMOS=-1)\r\n" + 
					"\r\n" + 
					"*** temp\r\n" + 
					".temp @5\r\n" + 
					"\r\n" + 
					"*** size\r\n" + 
					".param wid='@6u*@7' len=@8u\r\n" + 
					"\r\n" + 
					"*** voltage\r\n" + 
					".param vgstart = '-0 * polarities'\r\n" + 
					".param vgend = '@9 * polarities' $Vgs Sweep End Voltag\r\n" + 
					".param vgstep = '@10 * polarities' $vgs sweep step voltage\r\n" + 
					"\r\n" + 
					".param vds = '0 * polarities'\r\n" + 
					".param vgs = '0 * polarities'\r\n" + 
					".param vbs = '0 * polarities'\r\n" + 
					"\r\n" + 
					"*** voltage source/node\r\n" + 
					"vds  ds  0 vds\r\n" + 
					"vgm  g   0 vgs\r\n" + 
					"vgg  gg  0 vgsat\r\n" + 
					"vss  s   0 0\r\n" + 
					"vbb  b   0 vbs\r\n" + 
					"\r\n" + 
					"*** voltage sweep\r\n" + 
					".dc vds vdstart vdend vdstep sweep vgs poi @11\r\n" + 
					"@12\r\n" + 
					"\r\n" + 
					"*** sub circuit\r\n" + 
					"xd ds g s b @13 tr width=wid length=len $vd-id monitoring\r\n" + 
					"\r\n" + 
					"\r\n" + 
					"*** monitoring item\r\n" + 
					".measure dc corner_flag param='cor_flg'\r\n" + 
					".measure dc temp param='temper'\r\n" + 
					".measure dc w param = 'wid'\r\n" + 
					".measure dc l param = 'len'\r\n" + 
					"\r\n" + 
					"\r\n" + 
					"*** graph\r\n" + 
					".print idvd =id(xg.m@14) $ id-vd curve(vds : 0)\r\n" + 
					"\r\n" + 
					".alter  =>ldmos인 경우 .alter부분 생성하지 않음\r\n" + 
					".param vbs = '@15'\r\n" + 
					"\r\n" + 
					"\r\n" + 
					"*** end\r\n" + 
					".end";
			return tmpl;
		}
		
		public static Map<String, String> getIdVdInfo() {
			// TODO. DB에서 데이터를 가져온다.
			
			// 가져온 데이터를 맵으로 담는다.
			Map<String, String> replacements = new HashMap<String, String>() {{
			    put("@1", "1");
			    put("@2", "2");
			    put("@3", "3");
			    put("@4", "4");
			    put("@11", "5");
			}};
			
			return replacements;
		}
		
		public static String replace(String tmpl, Map<String, String> replacements) {
			String regex = "(\\@\\d{1,2})";
			Pattern p = Pattern.compile(regex);
			Matcher m = p.matcher(tmpl);
			StringBuffer sb = new StringBuffer();
			
			while (m.find())
			{
				String tmpKey = m.group(1);
				String repString;
				if (tmpKey.equals("@12")) {
					repString = makeTwelve(getBaseLine(replacements));
				} else {
					repString = replacements.get(tmpKey);
				}
			    if (repString != null)
			        m.appendReplacement(sb, repString);
			}
			m.appendTail(sb);
			
			return sb.toString();
		}
		
		public static String makeTwelve(int elevenValue) {
			StringBuffer sb = new StringBuffer();
			
			// DB에서 @12에 넣을 값 조회
			
			// ev값 만큼 추가하기
			for(int i = 0; i < elevenValue; i++) {
				sb.append("+");
				sb.append("값");
				sb.append("\r\n");
			}
			
			return sb.toString();
		}
		
		public static int getBaseLine(Map<String, String> replacements) {
			return Integer.parseInt(replacements.get("@11"));
		}
		
		public static String filterIfIsLdmos(String tmpl, boolean isLdmos, int baseLine) {
			if (!isLdmos) {
				return tmpl;
			} else {
				StringReader reader = new StringReader(tmpl);
				BufferedReader bufferedReader = new BufferedReader(reader);
				StringBuilder sb = new StringBuilder();
				String rLine="";
				int lineNumber = 1;

				try {
					while ((rLine = bufferedReader.readLine()) != null) {
						if (lineNumber < (59 + baseLine) || lineNumber > (60 + baseLine)) {
							sb.append(rLine + "\r\n");
						}
						lineNumber++;
					}
				} catch (IOException e) {
					
				} finally {
					reader.close();
					try {
						bufferedReader.close();
					} catch (IOException e) {}
				}
				return sb.toString();
			}
		}
	}
