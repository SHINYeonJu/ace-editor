package com.skhynix.dmr;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class LisProcess {
	
	public static void main(String[] args) {
		LisProcess lis = new LisProcess();
		
		String str = lis.getIdvd(); // lis.getIdvg();
		int yCnt = lis.getYCnt();
		
		HashMap<String, String> info = lis.extraInfo(str);
		System.out.println(info);
		switch (info.get("type")) {
		case "idvg":
			HashMap<String, ArrayList<ArrayList<String>>> idvg = lis.extraIdvg(str, yCnt);
			ArrayList<ArrayList<String>> first1 = idvg.get("first");
			ArrayList<ArrayList<String>> last1 = idvg.get("last");
			System.out.println("FIRST" + lis.makeMap("first", first1));
			System.out.println("LAST" + lis.makeMap("last", last1));
			break;
		case "idvd":
			HashMap<String, ArrayList<ArrayList<String>>> idvd = lis.extraIdvd(str, yCnt);
			ArrayList<ArrayList<String>> first2 = idvd.get("first");
			ArrayList<ArrayList<String>> last2 = idvd.get("last");
			System.out.println("FIRST" + lis.makeMap("first", first2));
			System.out.println("LAST" + lis.makeMap("last", last2));
			break;
		case "isub":
			break;
		}
	}
	
	public ArrayList<HashMap<String, String>> makeMap(String code, ArrayList<ArrayList<String>> list) {
		ArrayList<HashMap<String, String>> resultList = new ArrayList<HashMap<String, String>>();
		for (ArrayList<String> item : list) {
			HashMap<String, String> result = new HashMap<String, String>();
			result.put("code", code);
			int index = 0;
			for (String str : item) {
				if (index == 0) {
					result.put("x", str);
				} else {
					result.put("y" + index, str);
				}
				index++;
			}
			resultList.add(result);
		}
		
		return resultList;
	}
	
	public HashMap<String, String> extraInfo(String str) {
		StringReader reader = new StringReader(str);
		BufferedReader bufferedReader = new BufferedReader(reader);
		HashMap<String, String> result = new HashMap<String, String>();
		String rLine="";
		try {
			while ((rLine = bufferedReader.readLine()) != null) {
				if (rLine.startsWith("file=")) {
					if (rLine.indexOf("idvg") > -1) {
						result.put("type", "idvg");
					} else if (rLine.indexOf("idvd") > -1) {
						result.put("type", "idvd");
					} else if (rLine.indexOf("isub") > -1) {
						result.put("type", "isub");
					}
				} else if (rLine.trim().startsWith("temp=")) {
					result.put("temp", rLine.split("=")[1].trim());
				} else if (rLine.trim().startsWith("w=")) {
					result.put("width", rLine.split("=")[1].trim());
				} else if (rLine.trim().startsWith("l=")) {
					result.put("length", rLine.split("=")[1].trim());
					break;
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			reader.close();
			try {
				bufferedReader.close();
			} catch (IOException e) {}
		}
		return result;
	}
	
	public HashMap<String, ArrayList<ArrayList<String>>> extraIdvg(String str, int count) {
		StringReader reader = new StringReader(str);
		BufferedReader bufferedReader = new BufferedReader(reader);
		
		HashMap<String, ArrayList<ArrayList<String>>> result = new HashMap<String, ArrayList<ArrayList<String>>>();
		ArrayList<ArrayList<String>> first = new ArrayList<ArrayList<String>>();
		ArrayList<ArrayList<String>> last = new ArrayList<ArrayList<String>>();
		
		String rLine="";
		int index = 1;
		try {
			while ((rLine = bufferedReader.readLine()) != null) {
				if (rLine.indexOf("Idvg_lin") > -1) {
					this.extraValues(bufferedReader, first);
				} else if (rLine.indexOf("Idvg_sat") > -1) {
					this.extraValues(bufferedReader, last);
					index++;
				}
				if (index == count) {
					break;
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			reader.close();
			try {
				bufferedReader.close();
			} catch (IOException e) {}
		}
		
		result.put("first", first);
		result.put("last", last);
		return result;
	}
	
	public HashMap<String, ArrayList<ArrayList<String>>> extraIdvd(String str, int count) {
		StringReader reader = new StringReader(str);
		BufferedReader bufferedReader = new BufferedReader(reader);
		
		HashMap<String, ArrayList<ArrayList<String>>> result = new HashMap<String, ArrayList<ArrayList<String>>>();
		ArrayList<ArrayList<String>> first = new ArrayList<ArrayList<String>>();
		ArrayList<ArrayList<String>> last = new ArrayList<ArrayList<String>>();
		String rLine="";
		boolean isFirst = true;
		try {
			while ((rLine = bufferedReader.readLine()) != null) {
				if (rLine.indexOf("_idvd.pa1") > -1) {
					isFirst = false;
				}
				if (rLine.indexOf("volt          idvd") > -1) {
					extraValues(bufferedReader, isFirst ? first : last);
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			reader.close();
			try {
				bufferedReader.close();
			} catch (IOException e) {}
		}
		result.put("first", first);
		result.put("last", last);
		return result;
	}
	
	private void extraValues(BufferedReader bufferedReader, ArrayList<ArrayList<String>> list) throws IOException {
		int index = 0;
		String rLine="";
		while ((rLine = bufferedReader.readLine()) != null) {
			String val = rLine.trim();
			if (val.equals("y")) {
				break;
			}
			if (val.indexOf(" ") == -1) {
				continue;
			}
			boolean isFirst = list.size() <= index;
			ArrayList<String> tmp = isFirst ? new ArrayList<String>() : list.get(index);
			String x = val.substring(0, val.indexOf(" ")).trim();
			String y = val.substring(val.lastIndexOf(" ")).trim();

			if (isFirst) {
				list.add(tmp);
				tmp.add(x);
			}
			tmp.add(y);
			index++;
		}
	}
	
	public int getYCnt() {
		return 4;
	}
	
	public String getIdvg() {
		return "*****option summary\r\n" + 
				"*******\r\n" + 
				"runlvl = 5.  Bypass =2\r\n" + 
				" Opening plot unit = 15\r\n" + 
				"file=HD180IHL5_VO.1.0_nhvs18_h_idvg.pa0\r\n" + 
				"12\r\n" + 
				"********dc transfer cuvers tnom=25.000 temp=25.000*****\r\n" + 
				"x\r\n" + 
				"vgs          Idvg_lin\r\n" + 
				" X1  X1Y1\r\n" + 
				" X2  X2Y1\r\n" + 
				"y\r\n" + 
				"x\r\n" + 
				"vgs          Idvg_sat\r\n" + 
				"  X1 X1Y1\r\n" + 
				"y\r\n" + 
				" corner_flag=0.0000e+00\r\n" + 
				" temp=-4.000e+01\r\n" + 
				" w=2.0000e-05\r\n" + 
				" l=5.5000e-07\r\n" + 
				"\r\n" + 
				"*****option summary\r\n" + 
				"*******\r\n" + 
				"runlvl = 5.  Bypass =2\r\n" + 
				" Opening plot unit = 15\r\n" + 
				"file=HD180IHL5_VO.1.0_nhvs18_h_idvg.pa1\r\n" + 
				"12\r\n" + 
				"\r\n" + 
				"********dc transfer cuvers tnom=25.000 temp=25.000*****\r\n" + 
				"X\r\n" + 
				"vgs          Idvg_lin\r\n" + 
				" X1 X1Y2\r\n" + 
				" X2  X2Y2\r\n" + 
				" y\r\n" + 
				" \r\n" + 
				"vgs          Idvg_sat\r\n" + 
				"  X1 X1Y2\r\n" + 
				"  y\r\n" + 
				"\r\n" + 
				"*****option summary\r\n" + 
				"*******\r\n" + 
				"runlvl = 5.  Bypass =2\r\n" + 
				" Opening plot unit = 15\r\n" + 
				"file=HD180IHL5_VO.1.0_nhvs18_h_idvg.pa2\r\n" + 
				"\r\n" + 
				"********dc transfer cuvers tnom=25.000 temp=25.000*****\r\n" + 
				"X\r\n" + 
				"vgs          Idvg_lin\r\n" + 
				" X1  X1Y3\r\n" + 
				" X2  X2Y3\r\n" + 
				" y\r\n" + 
				"\r\n" + 
				"vgs          Idvg_sat\r\n" + 
				"  X1 X1Y3\r\n" + 
				"  y\r\n" + 
				"\r\n" + 
				"*****option summary\r\n" + 
				"*******\r\n" + 
				"runlvl = 5.  Bypass =2\r\n" + 
				" Opening plot unit = 15\r\n" + 
				"file=HD180IHL5_VO.1.0_nhvs18_h_idvg.pa3\r\n" + 
				"\r\n" + 
				"********dc transfer cuvers tnom=25.000 temp=25.000*****\r\n" + 
				"X\r\n" + 
				"vgs          Idvg_lin\r\n" + 
				" X1  X1Y4\r\n" + 
				" X2  X2Y4\r\n" + 
				" y\r\n" + 
				" \r\n" + 
				"vgs          Idvg_sat\r\n" + 
				"  X1 X1Y4\r\n" + 
				"  y";
	}
	
	public String getIdvd() {
		return "***option summary\r\n" + 
				"file=HD180IHL5_V0.1.0_nhvs_idvd.pa0\r\n" + 
				"\r\n" + 
				"**parameter vgs = 6.0000000e+00 **\r\n" + 
				"\r\n" + 
				"X\r\n" + 
				"\r\n" + 
				"volt          idvd         \r\n" + 
				"X1 X1Y1\r\n" + 
				"X2 X2Y1\r\n" + 
				"y\r\n" + 
				"\r\n" + 
				"\r\n" + 
				"**parameter vgs = 6.0000000e+00 **\r\n" + 
				"\r\n" + 
				"X\r\n" + 
				"\r\n" + 
				"volt          idvd\r\n" + 
				"X1 X1Y2\r\n" + 
				"X2 X2Y2\r\n" + 
				"y\r\n" + 
				"\r\n" + 
				"***option summary\r\n" + 
				"file=HD180IHL5_V0.1.0_nhvs_idvd.pa1\r\n" + 
				"\r\n" + 
				"**parameter vgs = 6.0000000e+00 **\r\n" + 
				"\r\n" + 
				"X\r\n" + 
				"\r\n" + 
				"volt          idvd\r\n" + 
				"X1 X1Y3\r\n" + 
				"X2 X2Y3\r\n" + 
				"y\r\n" + 
				"\r\n" + 
				"volt          idvd\r\n" + 
				"X1 X1Y4\r\n" + 
				"X2 X2Y4\r\n" + 
				"y";
	}

}
